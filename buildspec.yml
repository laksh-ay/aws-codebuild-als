version: 0.2

env:
  parameter-store:
    arr : lambda-codebuild
    TITLE-qa : "/qa/TITLE"
    DESCRIPTION-qa : "/qa/DESCRIPTION"
    BODY-qa : "/qa/BODY"
    SIGN-qa : "/qa/SIGN"
    TITLE-prod : "/prod/TITLE"
    DESCRIPTION-prod : "/prod/DESCRIPTION"
    BODY-prod : "/prod/BODY"
    SIGN-prod : "/prod/SIGN"
    TITLE-stage : "/stage/TITLE"
    DESCRIPTION-stage : "/stage/DESCRIPTION"
    BODY-stage : "/stage/BODY"
    SIGN-stage : "/stage/SIGN"

phases:
  install:
    commands:
      - apt-get update -y
      - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
      - echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
      - apt-get update -y
      - apt-get install -y yarn
      - echo for installing serverless
      - cd server
      - yarn global add serverless
      - yarn install
      - echo for local serverless developement
      # - cd ../client
      # - yarn install

  build:
    commands:
      # - cd ../server
      # - info=$(sls deploy)
      # - echo $info
      # - echo Build complete of server
      # - URL=$(echo $info | grep -oP "(https:\/\/)[a-zA-Z0-9]+\.[a-z]+\-[a-z]+\.[a-z]{2}\-[a-z]+\-[0-9]{1}\.[a-z]+\.[a-z]{3}\/[a-z]+$")
      # - echo $URL
      # - cd ../client
      # - REACT_APP_BACKEND_URL=$URL yarn run build
      # - echo Build complete of client
      # - cd ..
      # - set -a arr[3]
      # - arr[0]=qa
      # - arr[1]=prod
      # - arr[2]=dev
      # - cd server
      # - obj=$(aws ssm get-parameters --names lambda-codebuild --query "Parameters[*].{Value:Value}" | grep -i "Value")
      # - val=$(echo $obj | awk 'NR==1{print $2}')
      # - echo $val
      # - arr=$(echo $val | grep -oP "\w+")
      - echo $arr
      - for i in ${arr}; 
          do 
          echo $i;
          if[${i} == qa]; then sed -i "s/1/$TITLE-qa/g" .env; sed -i "s/2/$DESCRIPTION-qa/g" .env; sed -i "s/3/$BODY-qa/g" .env; sed -i "s/4/$SIGN-qa/g" .env; fi
          if[${i} == prod]; then sed -i "s/1/$TITLE-prod/g" .env; sed -i "s/2/$DESCRIPTION-prod/g" .env; sed -i "s/3/$BODY-prod/g" .env; sed -i "s/4/$SIGN-prod/g" .env; fi
          if[${i} == stage]; then sed -i "s/1/$TITLE-stage/g" .env; sed -i "s/2/$DESCRIPTION-stage/g" .env; sed -i "s/3/$BODY-stage/g" .env; sed -i "s/4/$SIGN-stage/g" .env; fi
          sls deploy -s test; 
          version=$(aws lambda list-versions-by-function --function-name express-api-test-app --no-paginate --query "max_by(Versions, &  to_number(to_number(Version) || '0'))" | grep -i "Version"); 
          string=$(echo $version | awk 'NR==1{print $2}'); 
          number=$(echo $string | grep -oP "\d"); 
          echo $number; 
          aws lambda create-alias --name $i --function-name express-api-test-app --function-version $number; 
          done
      - echo deployed

cache:
  paths:
    # - 'client/node_modules/**/*'
    - 'server/node_modules/**/*'

artifacts:
  files:
    - '**/*'
  discard-paths: no
  base-directory: server
  # base-directory: client/build

role: arn:aws:iam::730627384046:role/service-role/codebuild-lambda-build-service-role


      - QA=$(aws ssm get-parameters --names /Codebuild/${i}/Title --query "Parameters[*].{Value:Value}" | grep -i "Value")

