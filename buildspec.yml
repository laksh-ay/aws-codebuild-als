version: 0.2

# env:
#   parameter-store:
# arr : lambda-codebuild
# TITLE-qa : "/qa/TITLE"
# DESCRIPTION-qa : "/qa/DESCRIPTION"
# BODY-qa : "/qa/BODY"
# SIGN-qa : "/qa/SIGN"
# TITLE-prod : "/prod/TITLE"
# DESCRIPTION-prod : "/prod/DESCRIPTION"
# BODY-prod : "/prod/BODY"
# SIGN-prod : "/prod/SIGN"
# TITLE-stage : "/stage/TITLE"
# DESCRIPTION-stage : "/stage/DESCRIPTION"
# BODY-stage : "/stage/BODY"
# SIGN-stage : "/stage/SIGN"

phases:
  install:
    commands:
      - apt-get update -y
      - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
      - echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
      - apt-get update -y
      - apt-get install -y yarn
      - echo for installing serverless
      - cd server
      - yarn global add serverless
      - yarn install
      - echo for local serverless developement
      # - cd ../client
      # - yarn install

  build:
    commands:
      # - cd ../server
      # - info=$(sls deploy)
      # - echo $info
      # - echo Build complete of server
      # - URL=$(echo $info | grep -oP "(https:\/\/)[a-zA-Z0-9]+\.[a-z]+\-[a-z]+\.[a-z]{2}\-[a-z]+\-[0-9]{1}\.[a-z]+\.[a-z]{3}\/[a-z]+$")
      # - echo $URL
      # - cd ../client
      # - REACT_APP_BACKEND_URL=$URL yarn run build
      # - echo Build complete of client
      # - cd ..
      - obj=$(aws ssm get-parameters --names lambda-codebuild --query "Parameters[*].{Value:Value}" | grep -i "Value")
      - val=$(echo $obj | awk 'NR==1{print $2}')
      - echo $val
      - arr=$(echo $val | grep -oP "\w+")
      - echo $arr
      - for i in ${arr};
        do
        echo $i;
        TITLE_BIG=$(aws ssm get-parameters --names /${i}/TITLE --query "Parameters[*].{Value:Value}" | grep -i "Value");
        TITLE_COMMA=$(echo $TITLE_BIG | awk 'NR==1{print $2}');
        TITLE=$(echo $TITLE_COMMA | grep -oP "\w+");
        sed -i "s/1/$TITLE/g" .env;

        DESCRIPTION_BIG=$(aws ssm get-parameters --names /${i}/DESCRIPTION --query "Parameters[*].{Value:Value}" | grep -i "Value");
        DESCRIPTION_COMMA=$(echo $DESCRIPTION_BIG | awk 'NR==1{print $2}');
        DESCRIPTION=$(echo $DESCRIPTION_COMMA | grep -oP "\w+");
        sed -i "s/2/$DESCRIPTION/g" .env;

        BODY_BIG=$(aws ssm get-parameters --names /${i}/BODY --query "Parameters[*].{Value:Value}" | grep -i "Value");
        BODY_COMMA=$(echo $BODY_BIG | awk 'NR==1{print $2}');
        BODY=$(echo $BODY_COMMA | grep -oP "\w+");
        sed -i "s/3/$BODY/g" .env;

        SIGN_BIG=$(aws ssm get-parameters --names /${i}/SIGN --query "Parameters[*].{Value:Value}" | grep -i "Value");
        SIGN_COMMA=$(echo $SIGN_BIG | awk 'NR==1{print $2}');
        SIGN=$(echo $SIGN_COMMA | grep -oP "\w+");
        sed -i "s/4/$SIGN/g" .env;
        cat .env;
        sls deploy;
        version=$(aws lambda list-versions-by-function --function-name lambda-als-app --no-paginate --query "max_by(Versions, &  to_number(to_number(Version) || '0'))" | grep -i "Version");
        string=$(echo $version | awk 'NR==1{print $2}');
        number=$(echo $string | grep -oP "\d");
        echo $number;
        aws lambda delete-alias --function-name lambda-als-app --name ${i};
        aws lambda create-alias --name $i --function-name lambda-als-app --function-version $number;
        done
      - echo deployed

cache:
  paths:
    # - 'client/node_modules/**/*'
    - 'server/node_modules/**/*'

artifacts:
  files:
    - '**/*'
  discard-paths: no
  base-directory: server
  # base-directory: client/build

role: arn:aws:iam::730627384046:role/service-role/codebuild-lambda-build-service-role
