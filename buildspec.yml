version: 0.2

# env:
#   parameter-store:
# arr : lambda-codebuild
# TITLE-qa : "/qa/TITLE"
# DESCRIPTION-qa : "/qa/DESCRIPTION"
# BODY-qa : "/qa/BODY"
# SIGN-qa : "/qa/SIGN"
# TITLE-prod : "/prod/TITLE"
# DESCRIPTION-prod : "/prod/DESCRIPTION"
# BODY-prod : "/prod/BODY"
# SIGN-prod : "/prod/SIGN"
# TITLE-stage : "/stage/TITLE"
# DESCRIPTION-stage : "/stage/DESCRIPTION"
# BODY-stage : "/stage/BODY"
# SIGN-stage : "/stage/SIGN"

phases:
  install:
    commands:
      - apt-get update -y
      - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
      - echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
      - apt-get update -y
      - apt-get install -y yarn
      - echo for installing serverless
      - cd server
      - yarn global add serverless
      - yarn install
      - echo for local serverless developement
      # - cd ../client
      # - yarn install

  build:
    commands:
      # - cd ../server
      # - info=$(sls deploy)
      # - echo $info
      # - echo Build complete of server
      # - URL=$(echo $info | grep -oP "(https:\/\/)[a-zA-Z0-9]+\.[a-z]+\-[a-z]+\.[a-z]{2}\-[a-z]+\-[0-9]{1}\.[a-z]+\.[a-z]{3}\/[a-z]+$")
      # - echo $URL
      # - cd ../client
      # - REACT_APP_BACKEND_URL=$URL yarn run build
      # - echo Build complete of client
      # - cd ..
      - obj=$(aws ssm get-parameters --names lambda-codebuild --query "Parameters[*].{Value:Value}" | grep -i "Value")
      - val=$(echo $obj | awk 'NR==1{print $2}')
      - echo $val
      - arr=$(echo $val | grep -oP "\w+")
      - echo $arr
      - for i in ${arr};
        do
        echo $i;
        TITLE_BIG=$(aws ssm get-parameters --names /${i}/TITLE --query "Parameters[*].{Value:Value}" | grep -i "Value");
        echo ${TITLE_BIG};
        TITLE_COMMA=$(echo $TITLE_BIG | awk 'NR==1{print $2}');
        echo ${TITLE_COMMA};
        TITLE=$(echo $TITLE_COMMA | grep -oP "\w+");
        echo ${TITLE};
        sed -i "s/1/$TITLE/g" .env;

        DESCRIPTION_BIG=$(aws ssm get-parameters --names /${i}/DESCRIPTION --query "Parameters[*].{Value:Value}" | grep -i "Value");
        echo ${DESCRIPTION_BIG};
        DESCRIPTION_COMMA=$(echo $DESCRIPTION_BIG | awk 'NR==1{print $2}');
        echo ${DESCRIPTION_COMMA};
        DESCRIPTION=$(echo $DESCRIPTION_COMMA | grep -oP "\w+");
        echo ${DESCRIPTION};
        sed -i "s/2/$DESCRIPTION/g" .env;

        BODY_BIG=$(aws ssm get-parameters --names /${i}/BODY --query "Parameters[*].{Value:Value}" | grep -i "Value");
        BODY_COMMA=$(echo $BODY_BIG | awk 'NR==1{print $2}');
        BODY=$(echo $BODY_COMMA | grep -oP "\w+");
        sed -i "s/3/$BODY/g" .env;

        SIGN_BIG=$(aws ssm get-parameters --names /${i}/SIGN --query "Parameters[*].{Value:Value}" | grep -i "Value");
        SIGN_COMMA=$(echo $SIGN_BIG | awk 'NR==1{print $2}');
        SIGN=$(echo $SIGN_COMMA | grep -oP "\w+");
        sed -i "s/4/$SIGN/g" .env;
        echo "env fileeeeeeeeeeee"
        cat .env;
        sls deploy;
        done
      - info=$(sls info)
      - REST_IDS=$(echo $info | grep -oP "(\w+)(?:\.execute)")
      - REST_ID=$(echo $REST_IDS | awk 'NR==1{print $1}')
      - REST_API_ID=$(echo $REST_ID | grep -oP "([a-zA-Z0-9]+)[^(\.execute)]")
      - echo $REST_API_ID
      - aws apigateway get-deployments --rest-api-id $REST_API_ID | jq '.items[]' > file.txt
      - size=$(grep -o '{' file.txt | wc -w)
      - echo $size
      - if [ "$size" = "1" ];
        then
        aws apigateway delete-stage --rest-api-id $REST_API_ID --stage-name dev;
        fi
      - rm file.txt
      - resource_ids=$(aws apigateway get-resources --rest-api-id $REST_API_ID)
      - echo $resource_ids
      - echo $resource_ids | jq '.items[] | select(.path == "/{proxy+}")' > file.txt
      - cat file.txt
      - grep_resource_id=$(cat file.txt | grep -i '"id"')
      - echo $grep_resource_id
      - regex_resource_id=$(echo $grep_resource_id | awk 'NR==1{print $2}')
      - echo $regex_resource_id
      - RESOURCE_ID=$(echo $regex_resource_id | grep -oP "\w+");
      - echo $RESOURCE_ID
      - rm file.txt
      - aws apigateway put-integration --rest-api-id $REST_API_ID --resource-id $RESOURCE_ID --http-method GET --type AWS_PROXY --integration-http-method POST --uri 'arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-southeast-2:026815080690:function:als-server-left-dev-app:${stageVariables.lambdaAlias}/invocations'
      - for i in ${arr};
        do
        aws apigateway create-deployment --rest-api-id $REST_API_ID --stage-name $i --variables lambdaAlias=$i;
        aws lambda add-permission --function-name "arn:aws:lambda:ap-southeast-2:026815080690:function:als-server-left-dev-app:${i}"  --source-arn "arn:aws:execute-api:us-east-2:683682269864:$REST_API_ID/*/*/*" --principal apigateway.amazonaws.com   --statement-id 6ec58999-550a-41ge-9408-50141dc4300f --action lambda:InvokeFunction;
        done
      - echo deployed

cache:
  paths:
    # - 'client/node_modules/**/*'
    - "server/node_modules/**/*"

artifacts:
  files:
    - "**/*"
  discard-paths: no
  base-directory: server
  # base-directory: client/build

role: arn:aws:iam::730627384046:role/service-role/codebuild-lambda-build-service-role
